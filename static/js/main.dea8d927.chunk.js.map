{"version":3,"sources":["map.jpeg","modules/Graph.js","App.js","index.js"],"names":["Graph","graph","nodes","addNode","nodeName","connect","origin","destination","weight","bidirectional","Dijkstra","inicio","final","distancia","backtrack","Object","keys","length","anterior","forEach","vertice","undefined","bt","_inicio","_final","console","log","reverse","locate","bottom","right","App","useState","route","setRoute","algo","world11","className","style","position","src","map","alt","onClick","role","aria-label","element","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dea8d927.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/map.86044075.jpeg\";","const Graph = (graph) => {\n\n    let nodes = graph\n\n    let connect = (origin, destination, weight, bidirectional=false) => {\n        nodes[origin][destination] = weight\n        if(bidirectional) nodes[destination][origin] = weight\n    }\n    \n    let addNode = (nodeName)=> {\n        nodes[nodeName] = {... nodes[nodeName]}\n    }\n\n    \n    let Dijkstra = (inicio, final , distancia=0, backtrack={} ) => {\n        // Establecemos las condiciones iniciales\n        if(!Object.keys(backtrack).length){\n                backtrack[inicio] = {\n                distancia,\n                anterior:\"\"\n            }\n        }\n\n        // Iteramos en los vertices que el nodo en curso puede visitar \n        Object.keys(nodes[inicio]).forEach(vertice => {\n            if(backtrack[vertice] === undefined || nodes[inicio][vertice]+distancia < backtrack[vertice].distancia){\n                backtrack[vertice] = {\n                    distancia: nodes[inicio][vertice] + distancia,\n                    anterior: inicio\n                }\n                // aplicamos, de forma recursiva el algoritmo de Dijkstra\n                Dijkstra(vertice, final, graph[inicio][vertice]+distancia, backtrack)\n            }\n\n        })\n\n        //usamos la tabla de backtrack para obtener la ruta mas corta hacia el origen y la regresamos inversa\n        if(distancia == 0){\n           const bt = (_inicio, _final) => {\n               const {anterior} = backtrack[_final]\n               return anterior === ''?\n               [_inicio]:\n               [_final, ...bt(_inicio, anterior)]\n           }\n\n           console.log(backtrack)\n           return bt(inicio, final).reverse()\n\n        }\n    }\n\n    return {\n        addNode,\n        connect,\n        nodes,\n        Dijkstra\n    }\n}\n\nexport default Graph","import { useState } from 'react';\nimport map from './map.jpeg'\nimport world11 from './world11.json'\nimport './uistyles.css'\nimport Graph from './modules/Graph'\nfunction App() {\n\nconst [route, setRoute] = useState([])\nconst algo = Graph(world11)\n\treturn (\n\t  <>\n\t\t<nav className=\"navbar navbar-dark bg-dark\">\n\t\t\t<div className=\"container-fluid\">\n\t\t\t<span className=\"navbar-brand mb-0 h1\">Navegacion de Grafos con Dijkstra</span>\n\t\t\t</div>\n\t\t</nav>\n\n\t\t<div>\n\t\t\t<div className=\"button-container\" style={{\n\t\t\t\tposition: 'relative'\n\t\t\t}}>\n\t\t\t\t<img src={map} alt=\"Super mario 3 world 1\"/ >\n\n\t\t\t\t<button onClick={()=>{\n\t\t\t\t\tsetRoute(algo.Dijkstra('Start', 'Start'))\n\t\t\t\t}} style={locate(38,67)}>Start</button>\n\t\t\t\t<button onClick={()=>{\n\t\t\t\t\tsetRoute(algo.Dijkstra('Start', 'N1'))\n\t\t\t\t}} style={locate(49,59)}>N1</button>\n\t\t\t\t<button onClick={()=>{\n\t\t\t\t\tsetRoute(algo.Dijkstra('Start', 'N2'))\n\t\t\t\t}} style={locate(49,37.5)}>N2</button>\n\t\t\t\t<button onClick={()=>{\n\t\t\t\t\tsetRoute(algo.Dijkstra('Start', 'N3'))\n\t\t\t\t}} style={locate(49,27)}>N3</button>\n\t\t\t\t<button onClick={()=>{\n\t\t\t\t\tsetRoute(algo.Dijkstra('Start', 'N4'))\n\t\t\t\t}} style={locate(38,27)}>N4</button>\n\t\t\t\t<button onClick={()=>{\n\t\t\t\t\tsetRoute(algo.Dijkstra('Start', 'CH1'))\n\t\t\t\t}} style={locate(38,15)}>Ch1</button>\n\t\t\t\t<button onClick={()=>{\n\t\t\t\t\tsetRoute(algo.Dijkstra('Start', 'Castillo'))\n\t\t\t\t}} style={locate(26,45)}>Castillo</button>\n\t\t\t\t<button onClick={()=>{\n\t\t\t\t\tsetRoute(algo.Dijkstra('Start', 'Diamante'))\n\t\t\t\t}} style={locate(26,35)}>Diamante</button>\n\t\t\t\t<button onClick={()=>{\n\t\t\t\t\tsetRoute(algo.Dijkstra('Start', 'N5'))\n\t\t\t\t}} style={locate(6.5,59)}>N5</button>\n\t\t\t\t<button onClick={()=>{\n\t\t\t\t\tsetRoute(algo.Dijkstra('Start', 'N6'))\n\t\t\t\t}} style={locate(6.5,37.5)}>N6</button>\n\t\t\t\t<button onClick={()=>{\n\t\t\t\t\tsetRoute(algo.Dijkstra('Start', 'CH2'))\n\t\t\t\t}} style={locate(17,47)}>Ch2</button>\n\t\t\t\t<button onClick={()=>{\n\t\t\t\t\tsetRoute(algo.Dijkstra('Start', 'Bowser'))\n\t\t\t\t}} style={locate(17,13.5)}>Bowser</button>\n\t\t\t</div>\n\t\t</div>\n\t\t\t<div className=\"container px-4\">\n\t\t<div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n\t\t\t{\n\t\t\t\t[...route].map(element=>{\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<button key={element} type=\"button\" className=\"btn btn-primary\">{element}</button>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\n\n\n\t\t\t</div>\n\t\t</div>\n\t  </>\n  )\n}\n\nconst locate = (bottom, right) => {\n\treturn {\n\t\tbottom: `${bottom}em`, \n\t\tright: `${right}em`\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}