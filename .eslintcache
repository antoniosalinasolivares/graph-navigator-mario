[{"/home/yonosoytony/.Projects/graph-navigator-mario/src/index.js":"1","/home/yonosoytony/.Projects/graph-navigator-mario/src/App.js":"2","/home/yonosoytony/.Projects/graph-navigator-mario/src/modules/Graph.js":"3"},{"size":238,"mtime":1611905925806,"results":"4","hashOfConfig":"5"},{"size":2415,"mtime":1612401519064,"results":"6","hashOfConfig":"5"},{"size":1779,"mtime":1611977731665,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"ctezlm",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"15","usedDeprecatedRules":"16"},"/home/yonosoytony/.Projects/graph-navigator-mario/src/index.js",[],["17","18"],"/home/yonosoytony/.Projects/graph-navigator-mario/src/App.js",[],"/home/yonosoytony/.Projects/graph-navigator-mario/src/modules/Graph.js",["19","20"],"const Graph = (graph) => {\n\n    let nodes = graph\n\n    let connect = (origin, destination, weight, bidirectional=false) => {\n        nodes[origin][destination] = weight\n        if(bidirectional) nodes[destination][origin] = weight\n    }\n    \n    let addNode = (nodeName)=> {\n        nodes[nodeName] = {... nodes[nodeName]}\n    }\n\n    \n    let Dijkstra = (inicio, final , distancia=0, backtrack={} ) => {\n        // Establecemos las condiciones iniciales\n        if(!Object.keys(backtrack).length){\n                backtrack[inicio] = {\n                distancia,\n                anterior:\"\"\n            }\n        }\n\n        // Iteramos en los vertices que el nodo en curso puede visitar \n        Object.keys(nodes[inicio]).forEach(vertice => {\n            if(backtrack[vertice] === undefined || nodes[inicio][vertice]+distancia < backtrack[vertice].distancia){\n                backtrack[vertice] = {\n                    distancia: nodes[inicio][vertice] + distancia,\n                    anterior: inicio\n                }\n                // aplicamos, de forma recursiva el algoritmo de Dijkstra\n                Dijkstra(vertice, final, graph[inicio][vertice]+distancia, backtrack)\n            }\n\n        })\n\n        //usamos la tabla de backtrack para obtener la ruta mas corta hacia el origen y la regresamos inversa\n        if(distancia == 0){\n           const bt = (_inicio, _final) => {\n               const {anterior} = backtrack[_final]\n               return anterior === ''?\n               [_inicio]:\n               [_final, ...bt(_inicio, anterior)]\n           }\n\n           console.log(backtrack)\n           return bt(inicio, final).reverse()\n\n        }\n    }\n\n    return {\n        addNode,\n        connect,\n        nodes,\n        Dijkstra\n    }\n}\n\nexport default Graph",["21","22"],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":11,"column":31,"nodeType":"29","messageId":"30","endLine":11,"endColumn":32,"fix":"31"},{"ruleId":"32","severity":1,"message":"33","line":38,"column":22,"nodeType":"34","messageId":"35","endLine":38,"endColumn":24},{"ruleId":"23","replacedBy":"36"},{"ruleId":"25","replacedBy":"37"},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"rest-spread-spacing","Unexpected whitespace after spread property operator.","ExperimentalSpreadProperty","unexpectedWhitespace",{"range":"40","text":"41"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["38"],["39"],"no-global-assign","no-unsafe-negation",[305,306],""]